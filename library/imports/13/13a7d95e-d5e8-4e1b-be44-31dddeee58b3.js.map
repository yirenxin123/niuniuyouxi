{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "CusWebView",
    "require",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "AdvertSprite",
    "Sprite",
    "Url",
    "webViewPrefab",
    "Prefab",
    "onLoad",
    "updateAdverItem",
    "info",
    "jumpurl",
    "UpdateWXHeadIcon",
    "pic",
    "callBackBtn",
    "message",
    "popView",
    "btn",
    "url",
    "GlobalEventManager",
    "getInstance",
    "emitEvent",
    "window",
    "SocketMessage",
    "tag",
    "MessageType",
    "SCENE_MSG",
    "data",
    "WebView",
    "instantiate",
    "director",
    "getScene",
    "addChild",
    "winSize",
    "getWinSize",
    "setPosition",
    "p",
    "width",
    "height",
    "getComponent",
    "setWebViewUrl",
    "getSpriteFrame2",
    "successCb",
    "failureCb",
    "target",
    "otherSender",
    "xhr",
    "XMLHttpRequest",
    "self",
    "onreadystatechange",
    "readyState",
    "status",
    "response",
    "responseText",
    "img",
    "BASE64",
    "decoder",
    "text",
    "Uint8Array",
    "length",
    "log",
    "Image",
    "src",
    "texture",
    "Texture2D",
    "initWithImage",
    "handleLoadedTexture",
    "newframe",
    "SpriteFrame",
    "spriteFrame",
    "timeout",
    "open",
    "send"
  ],
  "mappings": ";;AAAA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;;AAEAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,sBAAeL,GAAGM,MAXV;AAYRC,aAAM,EAZE;AAaRC,uBAAgBR,GAAGS;AAbX,KAHP;;AAmBL;AACAC,YAAQ,kBAAY,CAEnB,CAtBI;;AAwBL;AACA;;AAEA;;AAEAC,qBAAkB,yBAAUC,IAAV,EAAgB;AAC9B,aAAKL,GAAL,GAAWK,KAAKC,OAAhB;AACA;;AAEAC,yBAAiBF,KAAKG,GAAtB,EAA0B,KAAKV,YAA/B;AACA;AACH,KAnCI;;AAqCLW,iBAAc,uBAAY;;AAEtB,YAAIC,UAAU;AACVC,qBAAS,UADC;AAEVC,iBAAK,aAFK;AAGVC,iBAAM,KAAKb;AAHD,SAAd;AAKAc,2BAAmBC,WAAnB,GAAiCC,SAAjC,CAA2CC,OAAOC,aAAlD,EAAiE,EAAEC,KAAKF,OAAOG,WAAP,CAAmBC,SAA1B,EAAqCC,MAAMZ,OAA3C,EAAjE;AACA;;AAEA,YAAIa,UAAU9B,GAAG+B,WAAH,CAAe,KAAKvB,aAApB,CAAd;AACAR,WAAGgC,QAAH,CAAYC,QAAZ,GAAuBC,QAAvB,CAAgCJ,OAAhC;AACA,YAAIK,UAAUnC,GAAGgC,QAAH,CAAYI,UAAZ,EAAd;AACAN,gBAAQO,WAAR,CAAoBrC,GAAGsC,CAAH,CAAKH,QAAQI,KAAR,GAAc,CAAnB,EAAqBJ,QAAQK,MAAR,GAAe,CAApC,CAApB;AACAV,gBAAQW,YAAR,CAAqB,YAArB,EAAmCC,aAAnC,CAAiD,KAAKnC,GAAtD;AACH,KApDI;;AAsDLoC,qBAAgB,yBAAUvB,GAAV,EAAcwB,SAAd,EAAwBC,SAAxB,EAAkCC,MAAlC,EAAyCC,WAAzC,EAAsD;AAClE;;;AAIA;;AAEA,YAAIC,MAAM,IAAIC,cAAJ,EAAV;;AAEA,YAAIC,OAAO,IAAX;;AAEAF,YAAIG,kBAAJ,GAAyB,YAAY;AACjC,gBAAIH,IAAII,UAAJ,IAAkB,CAAlB,IAAwBJ,IAAIK,MAAJ,IAAc,GAAd,IAAqBL,IAAIK,MAAJ,GAAa,GAA9D,EAAoE;AAChE,oBAAIC,WAAWN,IAAIO,YAAnB;;AAEA,oBAAIC,MAAMC,OAAOC,OAAP,CAAeJ,QAAf,CAAV;;AAGA;;AAEA,oBAAIK,OAAO,IAAIC,UAAJ,CAAeN,QAAf,EAAyB,CAAzB,EAA4BA,SAASO,MAArC,CAAX;AACA7D,mBAAG8D,GAAH,CAAO,YAAYH,IAAnB;;AAEA,oBAAIH,MAAM,IAAIO,KAAJ,EAAV;AACAP,oBAAIQ,GAAJ,GAAUP,OAAOC,OAAP,CAAeJ,QAAf,CAAV;AACAtD,mBAAG8D,GAAH,CAAO,eAAeN,IAAIQ,GAA1B;;AAEA,oBAAIC,UAAU,IAAIjE,GAAGkE,SAAP,EAAd;AACAD,wBAAQE,aAAR,CAAsBX,GAAtB,EAhBgE,CAgBpC;AAC5BS,wBAAQG,mBAAR;;AAEA,oBAAIC,WAAW,IAAIrE,GAAGsE,WAAP,CAAmBL,OAAnB,CAAf;AACAf,qBAAK7C,YAAL,CAAkBkE,WAAlB,GAAgCF,QAAhC;;AAGA;AACA;AACA;AACH,aA1BD,MA4BA;AACI;AACA;AACA;AACA;AACH;AACJ,SAnCD;;AAqCArB,YAAIwB,OAAJ,GAAc,IAAd;AACAxB,YAAIyB,IAAJ,CAAS,KAAT,EAAgBrD,GAAhB,EAAoB,IAApB;AACA4B,YAAI0B,IAAJ;AACH;AAzGI,CAAT",
  "file": "unknown",
  "sourcesContent": [
    "var CusWebView = require('CusWebView');\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n        AdvertSprite : cc.Sprite,\r\n        Url : '',\r\n        webViewPrefab : cc.Prefab,\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n\r\n    },\r\n\r\n    // called every frame, uncomment this function to activate update callback\r\n    // update: function (dt) {\r\n\r\n    // },\r\n\r\n    updateAdverItem : function (info) {\r\n        this.Url = info.jumpurl;\r\n        //this.getSpriteFrame2(info.pic)\r\n\r\n        UpdateWXHeadIcon(info.pic,this.AdvertSprite);\r\n        //UpdateWXHeadIcon(\"http://wx.qlogo.cn/mmopen/Po9mkm3Z42tolYpxUVpY6mvCmqalibOpcJ2jG3Qza5qgtibO1NLFNUF7icwCibxPicbGmkoiciaqKEIdvvveIBfEQqal8vkiavHIeqFT/0.png\",this.AdvertSprite);\r\n    },\r\n    \r\n    callBackBtn : function () {\r\n\r\n        var message = {\r\n            popView: \"FindView\",\r\n            btn: \"CallBackBtn\",\r\n            url : this.Url,\r\n        };\r\n        GlobalEventManager.getInstance().emitEvent(window.SocketMessage, { tag: window.MessageType.SCENE_MSG, data: message });\r\n        return;\r\n\r\n        var WebView = cc.instantiate(this.webViewPrefab);\r\n        cc.director.getScene().addChild(WebView);\r\n        var winSize = cc.director.getWinSize();\r\n        WebView.setPosition(cc.p(winSize.width/2,winSize.height/2));\r\n        WebView.getComponent('CusWebView').setWebViewUrl(this.Url );\r\n    },\r\n\r\n    getSpriteFrame2:function (url,successCb,failureCb,target,otherSender) {\r\n        //url = this.kyHelper + url;\r\n\r\n\r\n\r\n        //cc.log(page1);\r\n\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        var self = this;\r\n\r\n        xhr.onreadystatechange = function () {\r\n            if( xhr.readyState == 4 && (xhr.status >= 200 && xhr.status < 400)) {\r\n                var response = xhr.responseText;\r\n\r\n                var img = BASE64.decoder(response);\r\n\r\n\r\n                //cc.log(\"img=\", img);\r\n\r\n                var text = new Uint8Array(response, 0, response.length);\r\n                cc.log(\"text = \" + text);\r\n\r\n                var img = new Image();\r\n                img.src = BASE64.decoder(response);\r\n                cc.log(\"img.src = \" + img.src);\r\n\r\n                var texture = new cc.Texture2D();\r\n                texture.initWithImage(img); //cc.Texture2D.SRC_ALPHA, 1, 1, cc.size(1080, 300));\r\n                texture.handleLoadedTexture();\r\n\r\n                var newframe = new cc.SpriteFrame(texture);\r\n                self.AdvertSprite.spriteFrame = newframe;\r\n\r\n\r\n                // if (successCb != null) {\r\n                //     successCb.apply(target, [newframe, otherSender]);\r\n                // }\r\n            }\r\n            else\r\n            {\r\n                // if(failureCb != null)\r\n                // {\r\n                //     failureCb.apply(target);\r\n                // }\r\n            }\r\n        };\r\n\r\n        xhr.timeout = 5000;\r\n        xhr.open(\"GET\", url,true);\r\n        xhr.send();\r\n    },\r\n});\r\n"
  ]
}